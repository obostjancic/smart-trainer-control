import BikeInterface, { BikeControl } from "./bike-interface";
import { parseIndoorBikeData } from "./ftms";
import { FTMSControlOpCode, getControlPointOpCode } from "./ftms-control";

class MockBike extends BikeInterface {
  private _interval: number;
  private _isRunning: boolean;
  private _intervalId: number | null;
  private _data: Uint8Array[];
  private _currentIndex: number;
  private _targetPower: number;
  private _resistance: number;

  constructor(interval = 200) {
    super();
    this._interval = interval;
    this._isRunning = false;
    this._intervalId = null;
    this._data = [];
    this._currentIndex = 0;
    this._targetPower = 0;
    this._resistance = 0;

    this._loadData();
  }

  private _loadData(): void {
    this._data = MOCK_DATA.map((hex) =>
      Uint8Array.from(hex.split(",").map((byte) => parseInt(byte)))
    );
    console.log(`Loaded ${this._data.length} mock data points`);
  }

  private _sendNextDataPoint(): void {
    if (!this._isRunning || this._data.length === 0) return;

    const data = this._data[this._currentIndex];
    if (!data) return;
    this.emit("data", parseIndoorBikeData(data));

    this._currentIndex = (this._currentIndex + 1) % this._data.length;
  }

  async start(): Promise<void> {
    if (this._isRunning) return;

    try {
      this._isRunning = true;
      this._currentIndex = 0;

      this._intervalId = window.setInterval(() => {
        this._sendNextDataPoint();
      }, this._interval);

      console.log("Mock bike started");
    } catch (error) {
      console.error("Error starting mock bike:", error);
      throw error;
    }
  }

  async stop(): Promise<void> {
    if (this._intervalId !== null) {
      window.clearInterval(this._intervalId);
      this._intervalId = null;
    }
    this._isRunning = false;
    console.log("Mock bike stopped");
  }

  isRunning(): boolean {
    return this._isRunning;
  }

  async sendControl(
    control: keyof BikeControl,
    ...parameters: number[]
  ): Promise<void> {
    console.log("Sending control", control, parameters);
    const opCode = getControlPointOpCode(control);
    const getParameter = (index: number): number => {
      if (parameters.length >= index) {
        return parameters[index] as number;
      }
      return 0;
    };

    if (opCode === FTMSControlOpCode.RequestControl.valueOf()) {
      // Always grant control in mock mode
      return;
    } else if (opCode === FTMSControlOpCode.SetTargetPower.valueOf()) {
      this._targetPower = (getParameter(1) << 8) | getParameter(0);
      console.log(`Mock bike: Set target power to ${this._targetPower} watts`);
    } else if (
      opCode === FTMSControlOpCode.SetTargetResistanceLevel.valueOf()
    ) {
      this._resistance = (getParameter(1) << 8) | getParameter(0);
      console.log(`Mock bike: Set target resistance to ${this._resistance}`);
    } else {
      console.log(`Mock bike: Ignoring unsupported control code ${opCode}`);
    }
  }
}

export default MockBike;

const MOCK_DATA = [
  "64,0,0,0,0,0,0,0,0,0,0,0,28,0,232,3",
  "64,0,0,0,0,0,0,0,0,0,0,0,28,0,232,3",
  "64,0,0,0,0,0,0,0,0,0,0,0,28,0,232,3",
  "64,0,0,0,0,0,0,0,0,0,0,0,28,0,232,3",
  "64,0,0,0,0,0,0,0,0,0,0,0,28,0,232,3",
  "64,0,0,0,0,0,0,0,0,0,0,0,28,0,232,3",
  "64,0,0,0,0,0,0,0,0,0,0,0,28,0,232,3",
  "64,0,0,0,0,0,0,0,0,0,0,0,28,0,232,3",
  "64,0,0,0,0,0,0,0,0,0,0,0,28,0,232,3",
  "64,0,155,0,1,0,114,0,0,0,0,0,28,0,232,3",
  "64,0,149,0,1,0,109,0,0,0,0,0,28,0,232,3",
  "64,0,182,0,2,0,134,0,0,0,0,0,28,0,232,3",
  "64,0,203,0,2,0,150,0,0,0,0,0,28,0,232,3",
  "64,0,255,0,3,0,188,0,0,0,0,0,28,0,232,3",
  "64,0,70,1,4,0,241,0,0,0,0,0,28,0,232,3",
  "64,0,186,1,6,0,70,1,0,0,0,0,28,0,232,3",
  "64,0,236,1,9,0,107,1,0,0,0,0,28,0,232,3",
  "64,0,33,2,12,0,146,1,0,0,0,0,28,0,232,3",
  "64,0,77,2,14,0,178,1,0,0,0,0,28,0,232,3",
  "64,0,127,2,16,0,216,1,0,0,0,0,28,0,232,3",
  "64,0,144,2,16,0,228,1,0,0,0,0,28,0,232,3",
  "64,0,158,2,16,0,239,1,0,0,0,0,28,0,232,3",
  "64,0,160,2,15,0,240,1,0,0,0,0,28,0,232,3",
  "64,0,154,2,13,0,235,1,0,0,0,0,28,0,232,3",
  "64,0,146,2,11,0,230,1,0,0,0,0,28,0,232,3",
  "64,0,135,2,10,0,221,1,0,0,0,0,28,0,232,3",
  "64,0,138,2,10,0,223,1,0,0,0,0,28,0,232,3",
  "64,0,167,2,10,0,245,1,0,0,0,0,28,0,232,3",
  "64,0,185,2,10,0,2,2,0,0,0,0,28,0,232,3",
  "64,0,202,2,10,0,15,2,0,0,0,0,28,0,232,3",
  "64,0,211,2,10,0,22,2,0,0,0,0,28,0,232,3",
  "64,0,232,2,11,0,37,2,0,0,0,0,28,0,232,3",
  "64,0,9,3,11,0,61,2,0,0,0,0,28,0,232,3",
  "64,0,51,3,12,0,92,2,0,0,0,0,28,0,232,3",
  "64,0,71,3,12,0,107,2,0,0,0,0,28,0,232,3",
  "64,0,100,3,13,0,128,2,0,0,0,0,28,0,232,3",
  "64,0,139,3,13,0,158,2,0,0,0,0,28,0,232,3",
  "64,0,208,3,15,0,208,2,0,0,0,0,28,0,232,3",
  "64,0,236,3,18,0,229,2,0,0,0,0,28,0,232,3",
  "64,0,11,4,21,0,252,2,0,0,0,0,28,0,232,3",
  "64,0,32,4,22,0,11,3,0,0,0,0,28,0,232,3",
  "64,0,53,4,22,0,27,3,0,0,0,0,28,0,232,3",
  "64,0,57,4,21,0,30,3,0,0,0,0,28,0,232,3",
  "64,0,42,4,19,0,19,3,0,0,0,0,28,0,232,3",
  "64,0,22,4,18,0,4,3,0,0,0,0,28,0,232,3",
  "64,0,245,3,17,0,235,2,0,0,0,0,28,0,232,3",
  "64,0,224,3,16,0,220,2,0,0,0,0,28,0,232,3",
  "64,0,200,3,16,0,202,2,0,0,0,0,28,0,232,3",
  "64,0,189,3,15,0,194,2,0,0,0,0,28,0,232,3",
  "64,0,170,3,15,0,180,2,0,0,0,0,28,0,232,3",
  "64,0,148,3,15,0,164,2,0,0,0,0,28,0,232,3",
  "64,0,109,3,14,0,135,2,0,0,0,0,28,0,232,3",
  "64,0,85,3,14,0,117,2,0,0,0,0,28,0,232,3",
  "64,0,48,3,13,0,90,2,0,0,0,0,28,0,232,3",
  "64,0,22,3,13,0,71,2,0,0,0,0,28,0,232,3",
  "64,0,242,2,12,0,44,2,0,0,0,0,28,0,232,3",
  "64,0,225,2,12,0,32,2,0,0,0,0,28,0,232,3",
  "64,0,15,3,12,0,66,2,0,0,0,0,28,0,232,3",
  "64,0,76,3,12,0,111,2,0,0,0,0,28,0,232,3",
  "64,0,170,3,14,0,180,2,0,0,0,0,28,0,232,3",
  "64,0,5,4,19,0,247,2,0,0,0,0,28,0,232,3",
  "64,0,133,4,26,0,86,3,0,0,0,0,28,0,232,3",
  "64,0,202,4,33,0,137,3,0,0,0,0,28,0,232,3",
  "64,0,25,5,40,0,195,3,0,0,0,0,28,0,232,3",
  "64,0,64,5,44,0,224,3,0,0,0,0,28,0,232,3",
  "64,0,126,5,46,0,14,4,0,0,0,0,28,0,232,3",
  "64,0,199,5,46,0,67,4,0,0,0,0,28,0,232,3",
  "64,0,37,6,47,0,137,4,0,0,0,0,28,0,232,3",
  "64,0,87,6,49,0,174,4,0,0,0,0,28,0,232,3",
  "64,0,153,6,52,0,223,4,0,0,0,0,28,0,232,3",
  "64,0,185,6,53,0,246,4,0,0,0,0,28,0,232,3",
  "64,0,229,6,54,0,23,5,0,0,0,0,28,0,232,3",
  "64,0,239,6,51,0,30,5,0,0,0,0,28,0,232,3",
  "64,0,250,6,46,0,38,5,0,0,0,0,28,0,232,3",
  "64,0,9,7,41,0,49,5,0,0,0,0,28,0,232,3",
  "64,0,44,7,36,0,75,5,0,0,0,0,28,0,232,3",
  "64,0,62,7,34,0,88,5,0,0,0,0,28,0,232,3",
  "64,0,69,7,33,0,94,5,0,0,0,0,28,0,232,3",
  "64,0,64,7,33,0,90,5,0,0,0,0,28,0,232,3",
  "64,0,49,7,33,0,79,5,0,0,0,0,28,0,232,3",
  "64,0,39,7,33,0,72,5,0,0,0,0,28,0,232,3",
  "64,0,26,7,32,0,62,5,0,0,0,0,28,0,232,3",
  "64,0,10,7,32,0,50,5,0,0,0,0,28,0,232,3",
  "64,0,238,6,32,0,29,5,0,0,0,0,28,0,232,3",
  "64,0,211,6,31,0,9,5,0,0,0,0,28,0,232,3",
  "64,0,166,6,31,0,232,4,0,0,0,0,28,0,232,3",
  "64,0,137,6,30,0,211,4,0,0,0,0,28,0,232,3",
  "64,0,95,6,29,0,180,4,0,0,0,0,28,0,232,3",
  "64,0,64,6,28,0,157,4,0,0,0,0,28,0,232,3",
  "64,0,19,6,28,0,123,4,0,0,0,0,28,0,232,3",
  "64,0,248,5,27,0,104,4,0,0,0,0,28,0,232,3",
  "64,0,205,5,26,0,72,4,0,0,0,0,28,0,232,3",
  "64,0,177,5,25,0,51,4,0,0,0,0,28,0,232,3",
  "64,0,135,5,25,0,20,4,0,0,0,0,28,0,232,3",
  "64,0,106,5,24,0,255,3,0,0,0,0,28,0,232,3",
  "64,0,64,5,23,0,224,3,0,0,0,0,28,0,232,3",
  "64,0,37,5,23,0,204,3,0,0,0,0,28,0,232,3",
  "64,0,252,4,22,0,174,3,0,0,0,0,28,0,232,3",
  "64,0,224,4,21,0,153,3,0,0,0,0,28,0,232,3",
  "64,0,184,4,21,0,124,3,0,0,0,0,28,0,232,3",
  "64,0,157,4,20,0,104,3,0,0,0,0,28,0,232,3",
  "64,0,117,4,19,0,74,3,0,0,0,0,28,0,232,3",
  "64,0,90,4,19,0,54,3,0,0,0,0,28,0,232,3",
  "64,0,51,4,18,0,25,3,0,0,0,0,28,0,232,3",
  "64,0,24,4,17,0,5,3,0,0,0,0,28,0,232,3",
  "64,0,242,3,17,0,233,2,0,0,0,0,28,0,232,3",
  "64,0,217,3,16,0,215,2,0,0,0,0,28,0,232,3",
  "64,0,177,3,16,0,186,2,0,0,0,0,28,0,232,3",
  "64,0,153,3,15,0,167,2,0,0,0,0,28,0,232,3",
  "64,0,115,3,14,0,139,2,0,0,0,0,28,0,232,3",
  "64,0,91,3,14,0,122,2,0,0,0,0,28,0,232,3",
  "64,0,54,3,13,0,95,2,0,0,0,0,28,0,232,3",
  "64,0,29,3,13,0,76,2,0,0,0,0,28,0,232,3",
  "64,0,248,2,12,0,49,2,0,0,0,0,28,0,232,3",
  "64,0,224,2,12,0,31,2,0,0,0,0,28,0,232,3",
  "64,0,189,2,11,0,5,2,0,0,0,0,28,0,232,3",
  "64,0,166,2,11,0,244,1,0,0,0,0,28,0,232,3",
  "64,0,131,2,10,0,219,1,0,0,0,0,28,0,232,3",
  "64,0,108,2,10,0,202,1,0,0,0,0,28,0,232,3",
  "64,0,73,2,9,0,175,1,0,0,0,0,28,0,232,3",
  "64,0,50,2,9,0,158,1,0,0,0,0,28,0,232,3",
  "64,0,17,2,8,0,135,1,0,0,0,0,28,0,232,3",
  "64,0,252,1,8,0,119,1,0,0,0,0,28,0,232,3",
  "64,0,220,1,7,0,95,1,0,0,0,0,28,0,232,3",
  "64,0,199,1,7,0,80,1,0,0,0,0,28,0,232,3",
  "64,0,168,1,6,0,57,1,0,0,0,0,28,0,232,3",
  "64,0,146,1,6,0,40,1,0,0,0,0,28,0,232,3",
  "64,0,116,1,5,0,19,1,0,0,0,0,28,0,232,3",
  "64,0,97,1,5,0,4,1,0,0,0,0,28,0,232,3",
  "64,0,67,1,5,0,238,0,0,0,0,0,28,0,232,3",
  "64,0,49,1,4,0,225,0,0,0,0,0,28,0,232,3",
  "64,0,23,1,4,0,206,0,0,0,0,0,28,0,232,3",
  "64,0,3,1,4,0,191,0,0,0,0,0,28,0,232,3",
  "64,0,238,0,4,0,176,0,0,0,0,0,28,0,232,3",
  "64,0,221,0,3,0,163,0,0,0,0,0,28,0,232,3",
  "64,0,197,0,3,0,145,0,0,0,0,0,28,0,232,3",
  "64,0,181,0,3,0,134,0,0,0,0,0,28,0,232,3",
  "64,0,169,0,3,0,124,0,0,0,0,0,28,0,232,3",
];
